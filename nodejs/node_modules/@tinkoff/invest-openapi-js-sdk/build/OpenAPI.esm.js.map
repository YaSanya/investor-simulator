{"version":3,"file":"OpenAPI.esm.js","sources":["../src/Streaming.ts","../src/OpenAPI.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport WebSocket from 'ws';\nimport {\n  CandleStreaming,\n  CandleStreamingMetaParams,\n  Depth,\n  Dict,\n  InstrumentInfoStreaming,\n  InstrumentInfoStreamingMetaParams,\n  Interval,\n  OrderbookStreaming,\n  OrderbookStreamingMetaParams,\n  SocketEventType,\n  StreamingError,\n} from './types';\n\n/**\n * @hidden\n */\nconst enum ReadyState {\n  'CONNECTING',\n  'OPEN',\n  'CLOSING',\n  'CLOSED',\n}\n\n/**\n * @hidden\n */\nexport default class Streaming extends EventEmitter {\n  private _ws: WebSocket | null = null;\n  private _wsPingTimeout?: NodeJS.Timeout;\n  private _wsQueue: object[] = [];\n  private _subscribeMessages: object[] = [];\n  private readonly socketURL: string;\n  private readonly secretToken: string;\n  private readonly authHeaders: any;\n\n  /**\n   *\n   * @param apiURL REST api url см [документацию](https://tinkoffcreditsystems.github.io/invest-openapi/env/)\n   * @param socketURL Streaming api url см [документацию](https://tinkoffcreditsystems.github.io/invest-openapi/env/)\n   * @param secretToken токен доступа см [получение токена доступа](https://tinkoffcreditsystems.github.io/invest-openapi/auth/)\n   *\n   */\n  constructor({ url, secretToken }: { url: string; secretToken: string }) {\n    super();\n    this.socketURL = url;\n    this.secretToken = secretToken;\n    this.authHeaders = {\n      Authorization: 'Bearer ' + this.secretToken,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  /**\n   * Соединяемся с сокетом\n   */\n  private connect() {\n    if (this._ws && [ReadyState.OPEN, ReadyState.CONNECTING].includes(this._ws.readyState)) {\n      return;\n    }\n\n    this._ws = new WebSocket(this.socketURL, {\n      handshakeTimeout: 4000,\n      perMessageDeflate: false,\n      headers: this.authHeaders,\n    });\n\n    this._ws.on('open', this.handleSocketOpen);\n    this._ws.on('message', this.handleSocketMessage);\n    this._ws.on('close', this.handleSocketClose);\n    this._ws.on('error', this.handleSocketError);\n  }\n\n  /**\n   * Обработчик открытия соединения\n   */\n  private handleSocketOpen = (e: Event) => {\n    // Восстанавливаем подписки\n    if (this._ws && this._subscribeMessages) {\n      this._wsQueue.length = 0;\n      this._subscribeMessages.forEach((msg) => {\n        this.enqueue(msg);\n      });\n    }\n\n    this.emit('socket-open', e);\n    this.dispatchWsQueue();\n    this.socketPingLoop();\n  };\n\n  /**\n   * Зацикленная отправка пингов на сервер\n   */\n  private socketPingLoop = () => {\n    if (this._ws) {\n      this._ws.ping('ping');\n\n      this._wsPingTimeout = setTimeout(this.socketPingLoop, 15000)\n    }\n  }\n\n  /**\n   * Обработчик закрытия соединения\n   */\n  private handleSocketClose = (e: Event) => {\n    this.emit('socket-close', e);\n    this.handleSocketError();\n  };\n\n  /**\n   * Обработчик ошибок и переподключение при необходимости\n   */\n  private handleSocketError = (e?: Error) => {\n    clearTimeout(this._wsPingTimeout!);\n    this.emit('socket-error', e);\n\n    if (!this._ws) {\n      return;\n    }\n\n    const isClosed = [ReadyState.CLOSING, ReadyState.CLOSED].includes(this._ws?.readyState!);\n\n    this._ws.off('open', this.handleSocketOpen);\n    this._ws.off('message', this.handleSocketMessage);\n    this._ws.off('close', this.handleSocketClose);\n    this._ws.off('error', this.handleSocketError);\n\n    if (isClosed) {\n      this._ws.terminate();\n      this._ws = null;\n      if (this._subscribeMessages.length) {\n        // не делаем реконнект если нет активных подписок\n        this.connect();\n      }\n    }\n  };\n\n  /**\n   * Обработчик входящих сообщений\n   */\n  private handleSocketMessage = (m: string) => {\n    const { event: type, payload, time: serverTime } = JSON.parse(m);\n\n    const otherFields = { serverTime };\n\n    if (type === 'error') {\n      this.emit('streaming-error', payload, otherFields);\n    } else {\n      this.emit(this.getEventName(type, payload), payload, otherFields);\n    }\n  };\n\n  /**\n   * Получение имени ивента\n   */\n  private getEventName(type: SocketEventType, params: Dict<string>) {\n    if (type === 'orderbook') {\n      return `${type}-${params.figi}-${params.depth}`;\n    }\n\n    if (type === 'candle') {\n      return `${type}-${params.figi}-${params.interval}`;\n    }\n\n    if (type === 'instrument_info') {\n      return `${type}-${params.figi}`;\n    }\n\n    if (type === 'error') {\n      return 'streaming-error';\n    }\n\n    throw new Error(`Unknown type: ${type}`);\n  }\n\n  /**\n   * Поставить сообщение в очередь на отправку в сокет\n   */\n  private enqueue(command: object) {\n    this._wsQueue.push(command);\n    this.dispatchWsQueue();\n  }\n\n  /**\n   * Разбор очереди сообщений на отправку в сокет\n   */\n  private dispatchWsQueue() {\n    if (this._ws?.readyState === ReadyState.OPEN) {\n      const cb = () => this._wsQueue.length && this.dispatchWsQueue();\n\n      this._ws.send(JSON.stringify(this._wsQueue.shift()), cb);\n    }\n  }\n\n  /**\n   * Подписка на различные каналы в сокете\n   */\n  private subscribeToSocket({ type, ...params }: any, cb: Function) {\n    if (!this._ws) {\n      this.connect();\n    }\n\n    const message = { event: `${type}:subscribe`, ...params };\n    this.enqueue(message);\n    this._subscribeMessages.push(message);\n\n    const handler = (x: any) => setImmediate(() => cb(x));\n    let eventName = this.getEventName(type, params);\n\n    this.on(eventName, handler);\n\n    return () => {\n      this.off(eventName, handler);\n\n      if (!this.listenerCount(eventName)) {\n        this.enqueue({ event: `${type}:unsubscribe`, ...params });\n        const index = this._subscribeMessages.findIndex((msg) => msg === message);\n\n        if (index !== -1) {\n          this._subscribeMessages.splice(index, 1);\n        }\n        if (!this._subscribeMessages.length) {\n          this._ws?.close();\n        }\n      }\n    };\n  }\n\n  orderbook(\n    { figi, depth = 3 }: { figi: string; depth?: Depth },\n    cb: (x: OrderbookStreaming, metaParams: OrderbookStreamingMetaParams) => any = console.log\n  ) {\n    return this.subscribeToSocket({ type: 'orderbook', figi, depth }, cb);\n  }\n\n  /**\n   * Метод для подписки на данные по свечному графику инструмента\n   * @example см. метод [[orderbook]]\n   * @param figi идентификатор инструмента\n   * @param interval интервал для свечи\n   * @param cb функция для обработки новых данных по свечи\n   * @return функция для отмены подписки\n   */\n  candle(\n    { figi, interval = '1min' }: { figi: string; interval?: Interval },\n    cb: (x: CandleStreaming, metaParams: CandleStreamingMetaParams) => any = console.log\n  ) {\n    return this.subscribeToSocket({ type: 'candle', figi, interval }, cb);\n  }\n\n  /**\n   * Метод для подписки на данные по инструменту\n   * @example см. метод [[orderbook]]\n   * @param figi идентификатор инструмента\n   * @param cb функция для обработки новых данных по инструменту\n   * @return функция для отмены подписки\n   */\n  instrumentInfo({ figi }: { figi: string }, cb: (x: InstrumentInfoStreaming, metaParams: InstrumentInfoStreamingMetaParams) => any = console.log) {\n    return this.subscribeToSocket({ type: 'instrument_info', figi }, cb);\n  }\n\n  /**\n   * Метод для обработки ошибки от сервиса стриминга\n   * @example см. метод [[onStreamingError]]\n   * @param cb\n   * @return функция для отмены подписки\n   */\n  onStreamingError(cb: (x: StreamingError, metaParams: InstrumentInfoStreamingMetaParams) => any) {\n    this.on('streaming-error', cb);\n\n    return () => {\n      this.off('streaming-error', cb);\n    }\n  }\n}\n","import 'isomorphic-fetch';\nimport {\n  CandleResolution,\n  Candles,\n  Currencies,\n  MarketInstrument,\n  MarketInstrumentList,\n  MarketOrderRequest,\n  Operations,\n  Order,\n  Orderbook,\n  PlacedLimitOrder,\n  PlacedMarketOrder,\n  Portfolio,\n  PortfolioPosition,\n  SandboxSetCurrencyBalanceRequest,\n  SandboxSetPositionBalanceRequest,\n  LimitOrderRequest,\n  UserAccounts,\n} from './domain';\nimport {\n  CandleStreaming,\n  Depth,\n  HttpMethod,\n  InstrumentId,\n  Interval,\n  OrderbookStreaming,\n  FIGI,\n  InstrumentInfoStreaming,\n  InstrumentInfoStreamingMetaParams,\n  CandleStreamingMetaParams,\n  StreamingError,\n} from './types';\nimport { URLSearchParams } from 'url';\nimport Streaming from './Streaming';\n\nexport * from './types';\nexport * from './domain';\n\nconst omitUndef = (x: object) => JSON.parse(JSON.stringify(x));\n\nfunction getQueryString(params: Record<string, string | number>) {\n  // must be a number https://github.com/microsoft/TypeScript/issues/32951\n  const searchParams = new URLSearchParams(omitUndef(params) as any).toString();\n\n  return searchParams.length ? `?${searchParams}` : '';\n}\n\ntype OpenApiConfig = {\n  apiURL: string;\n  socketURL: string;\n  secretToken: string;\n  brokerAccountId?: string;\n};\n\ntype RequestConfig<Q, B> = {\n  method?: HttpMethod;\n  query?: Q;\n  body?: B;\n};\n\nexport default class OpenAPI {\n  private _streaming: Streaming;\n  private _sandboxCreated: boolean = false;\n  private _currentBrokerAccountId: string | undefined = undefined;\n  private readonly apiURL: string;\n  private readonly secretToken: string;\n  private readonly authHeaders: any;\n\n  /**\n   *\n   * @param apiURL REST api url см [документацию](https://tinkoffcreditsystems.github.io/invest-openapi/env/)\n   * @param socketURL Streaming api url см [документацию](https://tinkoffcreditsystems.github.io/invest-openapi/env/)\n   * @param secretToken токен доступа см [получение токена доступа](https://tinkoffcreditsystems.github.io/invest-openapi/auth/)\n   * @param brokerAccountId номер счета (по умолчанию - Тинькофф)\n   */\n  constructor({ apiURL, socketURL, secretToken, brokerAccountId }: OpenApiConfig) {\n    this._streaming = new Streaming({ url: socketURL, secretToken });\n    this._currentBrokerAccountId = brokerAccountId;\n    this.apiURL = apiURL;\n    this.secretToken = secretToken;\n    this.authHeaders = {\n      Authorization: 'Bearer ' + this.secretToken,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  /**\n   * Запрос к REST\n   */\n  private async makeRequest<Q, B, R>( url: string, { method = 'get', query, body }: RequestConfig<Q, B> = {}): Promise<R> {\n    let requestParams: Record<string, any> = { method, headers: new Headers(this.authHeaders) };\n    let requestUrl = this.apiURL + url + getQueryString(query || {});\n\n    if (method === 'post') {\n      requestParams.body = JSON.stringify(body);\n    }\n\n    const res = await fetch(requestUrl, requestParams);\n\n    // XXX для консистентности ошибок от API\n    if (res.status === 401) {\n      throw {\n        status: 'Error',\n        message:\n          'Unauthorized! Try to use valid token. https://tinkoffcreditsystems.github.io/invest-openapi/auth/',\n      };\n    }\n    \n    if (res.status === 429) {\n      throw {\n        status: 'Error',\n        message:\n          'Too Many Requests!',\n      };\n    }    \n\n    if (!res.ok) {\n      throw await res.json();\n    }\n\n    const data = await res.json();\n\n    return data.payload;\n  }\n\n  /**\n   * Регистрация песочницы\n   */\n  private sandboxRegister() {\n    if (!this._sandboxCreated) {\n      this.makeRequest('/sandbox/register', { method: 'post' });\n      this._sandboxCreated = true;\n    }\n  }\n\n  /**\n   * Метод возвращает текущий номер счета (*undefined* - значение по умолчанию для счета Тинькофф).\n   */\n  getCurrentAccountId(): string | undefined {\n    return this._currentBrokerAccountId;\n  }\n\n  /**\n   * Метод для сохранения номера счета по умолчанию.\n   * @param brokerAccountId - Номер счета. Для счета Тинькофф можно также передать значение *undefined*.\n   */\n  setCurrentAccountId(brokerAccountId: string | undefined): void {\n    this._currentBrokerAccountId = brokerAccountId;\n  }\n\n  /**\n   * Метод для очистки песочницы\n   */\n  async sandboxClear(): Promise<any> {\n    await this.sandboxRegister();\n    return this.makeRequest('/sandbox/clear', {\n      method: 'post',\n      query: { brokerAccountId: this._currentBrokerAccountId },\n    });\n  }\n\n  /**\n   * Метод для задания баланса по бумагам\n   * @param params см. описание типа\n   */\n  async setPositionBalance(params: SandboxSetPositionBalanceRequest): Promise<void> {\n    await this.sandboxRegister();\n    return this.makeRequest('/sandbox/positions/balance', {\n      method: 'post',\n      query: { brokerAccountId: this._currentBrokerAccountId },\n      body: params,\n    });\n  }\n\n  /**\n   * Метод для задания баланса по валютам\n   * @param params см. описание типа\n   */\n  async setCurrenciesBalance(params: SandboxSetCurrencyBalanceRequest): Promise<void> {\n    await this.sandboxRegister();\n    return this.makeRequest('/sandbox/currencies/balance', {\n      method: 'post',\n      query: { brokerAccountId: this._currentBrokerAccountId },\n      body: params,\n    });\n  }\n\n  /**\n   * Метод для получение портфеля цб\n   */\n  portfolio(): Promise<Portfolio> {\n    return this.makeRequest('/portfolio', {\n      query: { brokerAccountId: this._currentBrokerAccountId },\n    });\n  }\n\n  /**\n   * Метод для получения валютных активов клиента\n   */\n  portfolioCurrencies(): Promise<Currencies> {\n    return this.makeRequest('/portfolio/currencies', {\n      query: { brokerAccountId: this._currentBrokerAccountId },\n    });\n  }\n\n  /**\n   * Метод для получение данных по инструменту в портфеле\n   * @param params см. описание типа\n   */\n  instrumentPortfolio(params: InstrumentId): Promise<PortfolioPosition | null> {\n    return this.portfolio().then((x) => {\n      return (\n        x.positions.find((position) => {\n          if ('figi' in params) {\n            return position.figi === params.figi;\n          }\n          if ('ticker' in params) {\n            return position.ticker === params.ticker;\n          }\n        }) || null\n      );\n    });\n  }\n\n  /**\n   * Метод для выставления заявки\n   * @param figi идентификатор инструмента\n   * @param lots количество лотов для заявки\n   * @param operation тип заявки\n   * @param price цена лимитной заявки\n   */\n  limitOrder({\n    figi,\n    lots,\n    operation,\n    price,\n  }: LimitOrderRequest & FIGI): Promise<PlacedLimitOrder> {\n    return this.makeRequest('/orders/limit-order', {\n      method: 'post',\n      query: {\n        figi,\n        brokerAccountId: this._currentBrokerAccountId,\n      },\n      body: {\n        lots,\n        operation,\n        price,\n      },\n    });\n  }\n\n  /**\n   * Метод для выставления заявки\n   * @param figi идентификатор инструмента\n   * @param lots количество лотов для заявки\n   * @param operation тип заявки\n   * @param price цена лимитной заявки\n   */\n  marketOrder({ figi, lots, operation }: MarketOrderRequest & FIGI): Promise<PlacedMarketOrder> {\n    return this.makeRequest('/orders/market-order', {\n      method: 'post',\n      query: {\n        figi,\n        brokerAccountId: this._currentBrokerAccountId,\n      },\n      body: {\n        lots,\n        operation,\n      },\n    });\n  }\n\n  //todo протестить\n  /**\n   * Метод для отмены активных заявок\n   * @param orderId идентифткатор заявки\n   */\n  cancelOrder({ orderId }: { orderId: string }): Promise<void> {\n    return this.makeRequest(`/orders/cancel`, {\n      method: 'post',\n      query: {\n        orderId,\n        brokerAccountId: this._currentBrokerAccountId,\n      },\n    });\n  }\n\n  /**\n   * Метод для получения всех активных заявок\n   */\n  orders(): Promise<Order[]> {\n    return this.makeRequest('/orders', {\n      query: { brokerAccountId: this._currentBrokerAccountId },\n    });\n  }\n\n  /**\n   * Метод для получения всех доступных валютных инструментов\n   */\n  currencies(): Promise<MarketInstrumentList> {\n    return this.makeRequest('/market/currencies');\n  }\n\n  /**\n   * Метод для получения всех доступных валютных ETF\n   */\n  etfs(): Promise<MarketInstrumentList> {\n    return this.makeRequest('/market/etfs');\n  }\n\n  /**\n   * Метод для получения всех доступных облигаций\n   */\n  bonds(): Promise<MarketInstrumentList> {\n    return this.makeRequest('/market/bonds');\n  }\n\n  /**\n   * Метод для получения всех доступных акций\n   */\n  stocks(): Promise<MarketInstrumentList> {\n    return this.makeRequest('/market/stocks');\n  }\n\n  /**\n   * Метод для получения операций по цб по инструменту\n   * @param from Начало временного промежутка в формате ISO 8601\n   * @param to Конец временного промежутка в формате ISO 8601\n   * @param figi Figi-идентификатор инструмента\n   */\n  operations({ from, to, figi }: { from: string; to: string; figi?: string }): Promise<Operations> {\n    return this.makeRequest('/operations', {\n      query: {\n        from,\n        to,\n        figi,\n        brokerAccountId: this._currentBrokerAccountId,\n      },\n    });\n  }\n\n  /**\n   * Метод для получения исторических свечей по FIGI\n   * @param from Начало временного промежутка в формате ISO 8601\n   * @param to Конец временного промежутка в формате ISO 8601\n   * @param figi Figi-идентификатор инструмента\n   * @param interval интервал для свечи\n   */\n  candlesGet({\n    from,\n    to,\n    figi,\n    interval = '1min',\n  }: {\n    from: string;\n    to: string;\n    figi: string;\n    interval?: CandleResolution;\n  }): Promise<Candles> {\n    return this.makeRequest('/market/candles', {\n      query: { from, to, figi, interval },\n    });\n  }\n\n  /**\n   * Метод для получение стакана\n   * @param figi Figi-идентификатор инструмента\n   * @param depth\n   */\n  orderbookGet({ figi, depth = 3 }: { figi: string; depth?: Depth }): Promise<Orderbook> {\n    return this.makeRequest('/market/orderbook', {\n      query: { figi, depth },\n    });\n  }\n  /**\n   * Метод для поиска инструментов по figi или ticker\n   * @param params { figi или ticker }\n   */\n  search(params: InstrumentId): Promise<MarketInstrumentList> {\n    if ('figi' in params) {\n      return this.makeRequest<any, never, MarketInstrument>('/market/search/by-figi', {\n        query: { figi: params.figi },\n      }).then((x) => (x ? { total: 1, instruments: [x] } : { total: 0, instruments: [] }));\n    }\n    if ('ticker' in params) {\n      return this.makeRequest('/market/search/by-ticker', {\n        query: { ticker: params.ticker },\n      });\n    }\n    throw new Error('should specify figi or ticker');\n  }\n\n  /**\n   * Метод для поиска инструмента по figi или ticker\n   * @param params { figi или ticker }\n   */\n  searchOne(params: InstrumentId): Promise<MarketInstrument | null> {\n    return this.search(params).then((x) => x.instruments[0] || null);\n  }\n\n  /**\n   * Метод для подписки на данные по стакану инструмента\n   * @example\n   * ```typescript\n   * const { figi } = await api.searchOne({ ticker: 'AAPL' });\n   * const unsubFromAAPL = api.orderbook({ figi }, (ob) => { console.log(ob.bids) });\n   * // ... подписка больше не нужна\n   * unsubFromAAPL();\n   * ```\n   * @param figi идентификатор инструмента\n   * @param depth\n   * @param cb функция для обработки новых данных по стакану\n   * @return функция для отмены подписки\n   */\n  orderbook(\n    { figi, depth = 3 }: { figi: string; depth?: Depth },\n    cb: (x: OrderbookStreaming) => any = console.log\n  ) {\n    return this._streaming.orderbook({ figi, depth }, cb);\n  }\n\n  /**\n   * Метод для подписки на данные по свечному графику инструмента\n   * @example см. метод [[orderbook]]\n   * @param figi идентификатор инструмента\n   * @param interval интервал для свечи\n   * @param cb функция для обработки новых данных по свечи\n   * @return функция для отмены подписки\n   */\n  candle(\n    { figi, interval = '1min' }: { figi: string; interval?: Interval },\n    cb: (x: CandleStreaming, metaParams: CandleStreamingMetaParams) => any = console.log\n  ) {\n    return this._streaming.candle({ figi, interval }, cb);\n  }\n\n  /**\n   * Метод для подписки на данные по инструменту\n   * @example см. метод [[orderbook]]\n   * @param figi идентификатор инструмента\n   * @param cb функция для обработки новых данных по инструменту\n   * @return функция для отмены подписки\n   */\n  instrumentInfo({ figi }: { figi: string }, cb: (x: InstrumentInfoStreaming, metaParams: InstrumentInfoStreamingMetaParams) => any = console.log) {\n    return this._streaming.instrumentInfo({ figi }, cb);\n  }\n\n\n  /**\n   * Метод для обработки сообщений об ошибки от стриминга\n   * @example\n   * ```typescript\n   * api.onStreamingError(({ error }) => { console.log(error) });\n   * api.instrumentInfo({ figi: 'NOOOOOOO' }, (ob) => { console.log(ob.bids) });\n   * // logs:  Subscription instrument_info:subscribe. FIGI NOOOOOOO not found\n   * ```\n   * @param cb функция для обработки всех ошибок от стриминга\n   * @return функция для отмены подписки\n   */\n  onStreamingError(cb: (x: StreamingError, metaParams: InstrumentInfoStreamingMetaParams) => any) {\n    return this._streaming.onStreamingError(cb);\n  }\n\n  /**\n   * Метод для получения брокерских счетов клиента\n   */\n  accounts(): Promise<UserAccounts> {\n    return this.makeRequest('/user/accounts');\n  }\n}\n"],"names":[],"mappings":"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"}